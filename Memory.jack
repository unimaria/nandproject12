// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static Array freeList;
	static int STACK_SIZE;
	static Array RAM;


    /** Initializes the class. */
    function void init() {
    	let RAM = 0;
    	let STACK_SIZE = 16383 - 2047;
    	let freeList = 2048;
    	let freeList[0] = STACK_SIZE;
    	let freeList[1] = 0;
    	return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
    	return RAM[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
    	let RAM[address] = value;
    	return;
    }

    function Array updateLists(Array currentList, Array lastList, int size)
    {
    	var Array result;

    	if( currentList[0] > (size + 2) )	// have to allocate for size+1 and two more for currentList
    	{
    		let result = currentList + 1;
    		let currentList = currentList + size + 1;
    		if( ~(lastList = 0) )
    		{
    			let lastList[1] = currentList;
    		}
    		else
    		{
    			let freeList = freeList + size + 1;
    		}
    		let currentList[0] = result[-1] - size - 1;
    		let currentList[1] = result[0];
    		let result[-1] = size + 1;
    		return result;
    	}
    	else
    	{
    		if( currentList[0] = (size + 2) )	//cant save current list so we add it to object
	    	{
	    		let result = currentList + 1;
	    			if(lastList = 0)
	    			{
	    				let freeList = result[0];
	    			}
	    			else
	    			{
	    				let lastList[1] = result[0];
	    			}
	    			let result[-1] = size + 2;
	    			return result;
	    	}
	    	else 	
	    	{
	    		if( currentList[0] = (size + 1) )	//we can replace this segment entirely
	    		{
	    			let result = currentList + 1;
	    			if(lastList = 0)
	    			{
	    				let freeList = result[0];
	    			}
	    			else
	    			{
	    				let lastList[1] = result[0];
	    			}
	    			let result[-1] = size + 1;
	    			return result;
	    		}
	    	}
	    }

	    //doest get here
	    return -1;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {

    	var Array currentList, lastList;
       	if(freeList[0] > size)
    	{
    		return Memory.updateLists(freeList, 0, size);
    	}
    	let lastList = freeList;
    	let currentList = freeList[1];
    	while( currentList[0] < (size + 1) )
    	{
    		if(currentList[1] = 0)	// last list and we cant alloc
    		{
    			return -1;
    		}
    		let lastList = currentList;
    		let currentList = currentList[1];
    	}
 		return Memory.updateLists(currentList, lastList, size);
    }
    

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
   		var Array currentList, lastList, newList;
   		let newList = o - 1;
   		let currentList = freeList;
   		while( (currentList < o) & (~(currentList = 0)) )
   		{
   			let lastList = currentList;
   			let currentList = currentList[1];
   		}
   		// now either currentList is at the start,end or middle of the chain
   		if(currentList = freeList)
   		{
   			if( (newList + newList[0]) = freeList )
   			{
   				let newList[0] = newList[0] + freeList[0];
    			let newList[1] = freeList[1];
    			let freeList = newList;
   			}
   			else
   			{
   				let newList[1] = freeList;
   				let freeList = newList;
   			}
   		}
   		else
   		{
	   		if(currentList = 0)		// at the end of the chain
	   		{
	   			if( (lastList + lastList[0]) = newList )
	   			{
	   				let lastList[0] = lastList[0] + newList[0];
	    			let lastList[1] = 0;
	   			}
	   			else
	   			{
	   				let lastList[1] = newList;
	   				let newList[1] = 0;
	   			}
	   		}
	   		else 	//in between two lists
	   		{
	   			// first merge last two
	   			if( (newList + newList[0]) = currentList )
	   			{
	   				let newList[0] = newList[0] + currentList[0];
	   				let newList[1] = currentList[1];
	   			}
	   			else
	   			{
	   				let newList[1] = currentList;
	   			}

	   			//now merge front two
	   			if( (lastList + lastList[0]) = newList )
	   			{
	   				let lastList[0] = lastList[0] + newList[0];
	    			let lastList[1] = newList[1];
	   			}
	   			else
	   			{
	   				let lastList[1] = newList;
	   			}
	   		}
	   	}

	   	return;
    }    
}
