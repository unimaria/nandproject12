// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	
	static boolean curColor;
	static Array binaryBits;

    /** Initializes the Screen. */
    function void init() {
		let curColor = true;
		let binaryBits = Array.new(16); //as number of bits
		let binaryBits[0] = 1;     // 0000000000000001
		let binaryBits[1] = 2;     // 0000000000000010
		let binaryBits[2] = 4;     // 0000000000000100
		let binaryBits[3] = 8;     // 0000000000001000
		let binaryBits[4] = 16;    // 0000000000010000
		let binaryBits[5] = 32;    // 0000000000100000
		let binaryBits[6] = 64;    // 0000000001000000
		let binaryBits[7] = 128;   // 0000000010000000
		let binaryBits[8] = 256;   // 0000000100000000
		let binaryBits[9] = 512;   // 0000001000000000
		let binaryBits[10] = 1024; // 0000010000000000
		let binaryBits[11] = 2048; // 0000100000000000
		let binaryBits[12] = 4096; // 0001000000000000
		let binaryBits[13] = 8192; // 0010000000000000
		let binaryBits[14] = 16384;// 0100000000000000
		let binaryBits[15] = 32768;// 1000000000000000 todo: check this one
    }

    /** Erases the entire screen. */
    function void clearScreen() {
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int address;
		var int value;
		var int modx;
		var int orBit;
		var int or;
		
		let address = (32 * y) + (x / 16);
		let value = Memory.peek(16384 + address);
		let modx = x - ((x/16) * 16);
		let orBit = binaryBits[modx];
		let or = orBit | value;
		
		
		
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
    }
}
